



Network Working Group                                            D. Wing
Internet-Draft                                                    Citrix
Intended status: Standards Track                        26 December 2024
Expires: 29 June 2025


                 A Referee to Authenticate Home Servers
                    draft-wing-settle-referee-latest

Abstract

   Obtaining and maintaining PKI certificates for devices in a home
   network is difficult for both technical and human factors reasons.
   This document describes an alternative approach to securely identify
   and authenticate home servers using a Referee system.  The referee
   allows bootstrapping a network of devices by trusting only one system
   in the home network -- the Referee.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://danwing.github.io/referee/draft-xyzzy-referee.html.  Status
   information for this document may be found at
   https://datatracker.ietf.org/doc/draft-wing-settle-referee/.

   Discussion of this document takes place on the SETTLE mailing list
   (mailto:settle@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/settle/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/settle/.

   Source for this draft and an issue tracker can be found at
   https://github.com/danwing/referee.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 29 June 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Requirements Evaluation
   3.  Operation
     3.1.  Referee
     3.2.  Servers
     3.3.  Clients
     3.4.  Revoking Authorization
   4.  Bootstrapping the Referee
     4.1.  Clients to Referee
     4.2.  Servers to Referee
       4.2.1.  Short Code or Scan Code
       4.2.2.  TOFU
   5.  Operational Notes
   6.  Security Considerations
   7.  IANA Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Appendix A.  Issues for Further Discussion
     A.1.  PKI Fallback
     A.2.  Multiple Networks: Multiple Referees
     A.3.  Unique Names
     A.4.  Key Lifetime (Rotating Public Key)
       A.4.1.  Server
       A.4.2.  Referee
     A.5.  Incrementatal Adoption
       A.5.1.  Server Does Not Support Referee
   Author's Address

1.  Introduction

   Most existing TLS communications require the server obtaining a
   certificate signed by a Certification Authority trusted by the
   client.  Within a home network this is fraught with complications of
   both human factors and technical natures.

   This document describes a Referee system to authorize the legitimate
   servers on a local domain.  A server, called a Referee, is entrusted
   to help clients identify and authenticate servers within the local
   domain.  The Referee system purposefully avoids Public Key
   Infrastructure using X.509 [PKIX].  The certificates that might be
   used for TLS handshake are only used to extract their public keys,
   rather than validating the certificate path.

2.  Requirements Evaluation

   Using requirements from [I-D.rbw-home-servers], the proposal in this
   document has the following summarized characteristics:

    +==========+========+===========+============+==========+========+
    | Solution | Reduce | Eliminate |  Existing  | Existing | Revoke |
    |          |   CA   |     CA    | CA Support |  Client  |  Auth  |
    |          |        |           |            | Support  |        |
    +==========+========+===========+============+==========+========+
    |  Referee |  Yes   |    Yes    |    N/A     | Some (*) |  Yes   |
    +----------+--------+-----------+------------+----------+--------+

             Table 1: Summary of Referee Against Requirements

   (*) Support exists in OpenSSL [rpk-openssl] and WolfSSL
   [rpk-wolfssl].

3.  Operation

3.1.  Referee

   The Referee function is implemented within any always-on device
   within the home (e.g., router, smart home hub, NAS).  The Referee
   contains a database of local hostnames and their Referee public key
   fingerprints.

   The Referee on a local network is named "referee.internal".

   Clients authenticate to the Referee and use HTTP GET to fetch the
   named public key fingerprint from the Referee server.  For example to
   get public key fingerprint of a server named printer.internal,

     GET /.well-known/referee/sha256/printer.internal HTTP/1.1

   The public key fingerprint is SHA-256 of the server's public key
   returned as an octet-stream.

   The client's initial trust of the Referee is performed by
   configuration of the client.  This might be eventually be eased with
   service discovery which is confirmed by the user when the user first
   wants to connect to a server on a new local domain.

3.2.  Servers

   A server supporting this specification is expected to be a printer
   (using IPPS or HTTPS), file server (e.g., NAS or laptop), IoT device,
   router (especially its HTTPS-based management console or its ssh
   server), or similar.

   Each in-home device supporting Referee has a fixed public key, which
   persists for the lifetime of the device.  During installation of the
   device to a Referee network, the device's hostname and public key
   fingerprint are stored into the Referee Server.  Several options
   exist for this step, detailed in Section 4.

   A server supporting this specification needs to support raw public
   keys with the server_certificate_type extension ([RFC7250]).  As
   detailed in [RFC7250], when the server receives a ClientHello with
   the raw public key certificate type in the server_certificate_type
   extension the server responds with its raw public key rather than a
   PKI certificate.

   If a server's Referee public key changes (e.g., factory reset, public
   key algorithm, key length) the new key needs to be enrolled with the
   Referee and the old key removed.  Clients will notice the mismatch
   and will query the Referee.  This functionality might be automated;
   see Appendix A.4.

3.3.  Clients

   A client supporting this specification is first configured with the
   DNS name of its Referee server.  It authenticates to the Referee
   server using one of the bootstrapping mechanisms (see Section 4).
   This step occurs only once for each home network the client joins, as
   each home network is responsible for being a Referee for its own
   devices.

   For the client, there are two situations that may occur: it has not
   previously cached the association of hostname to public key or it has
   cached that information.

   *  If not previously cached, the client queries that network's
      Referee with the DNS name of the server (e.g., printer.internal).
      The Referee responds with the public key fingerprint of that
      server.  The client checks if the public key fingerprint (from the
      Referee) matches the public key of the server (from the TLS
      handshake).  If they match, communication with the server
      continues.  The server MAY also cache the server name and public
      key.  If they do not match, the client aborts this communication
      session; further actions by the client are an implementation
      detail.

   *  If previously cached, the client determines if the cached public
      key matches the public key just obtained.  If they match,
      communication continues.  If they do not match, the client aborts
      the communication; further actions by the client are an
      implementation detail.

3.4.  Revoking Authorization

   When the administrator revoke authorization for a server (e.g.,
   replacement of a printer), the administrator removes the old public
   key from the Referee and installs the new key in the Referee.

   When this replacement occurs, the clients that have not already
   cached the server's public key will simply query the Referee, which
   has the server's new public key.  The clients that have cached the
   server's previous public key will notice the mismatch, pause their
   communication with the server, and validate with the Referee that the
   new key is legitimate, and continue their communication with the
   server.

   Thus, revoking authentication has immediate effect because the
   clients immediately validate a mismatch with the Referee.

4.  Bootstrapping the Referee

4.1.  Clients to Referee

   The clients have to be configured to trust their Referee.  This is a
   one time activity, for each home network the client joins.

   Until service discovery is defined for a Referee system, the client
   has to be configured to trust the Referee server's public key
   fingerprint.  This can be done manually or using TOFU, and is
   implementation specific.

      for discussion: To reduce initial bootstrap for client, perhaps
      use SVCB for client to bootstrap its first Referee?  This
      effectively achieves un-authenticated encryption to devices on the
      local network which is better than unencrypted traffic to those
      same devices.  For an attacker to abuse this, it requires an
      attacker advertise itself as the Referee and to maintain its
      status as Referee.

      for discussion: see Appendix A.4 regarding Referee key lifetime.

4.2.  Servers to Referee

   Server names and their associated public key fingerprints have to be
   populated into the Referee.

4.2.1.  Short Code or Scan Code

   Short code printed on the Referee-capable server which can be scanned
   by a smartphone application by the home administrator which is
   authorized to push new associations to the Referee.  Alternatively,
   the same information could be manually typed in by the home
   administrator to the Referee's management GUI or CLI.

4.2.2.  TOFU

   A client device which leans the Referee does not have an existing
   entry for a (new) name is authorized to 'push' the (new) name and its
   public key fingerprint to the Referee.

5.  Operational Notes

   The Referee has to always be available.  The client cache helps
   reduce load on the Referee but new clients (e.g., new devices, guest
   users, restored devices) and client cache invalidation will always
   cause some traffic to the Referee.

   When the Referee is unavailable, clients behavior devolves to what we
   have today: servers will need to obtain a real PKI certificate signed
   by a Certification Authority already trusted by the clients, or else
   clients will need to manually trust individual certificates.

6.  Security Considerations

   See Section 5 describing client behavior when the Referee is
   unavailable.

7.  IANA Considerations

   Register new .well_known URI for "referee".

8.  References

8.1.  Normative References

   [RFC7250]  Wouters, P., Ed., Tschofenig, H., Ed., Gilmore, J.,
              Weiler, S., and T. Kivinen, "Using Raw Public Keys in
              Transport Layer Security (TLS) and Datagram Transport
              Layer Security (DTLS)", RFC 7250, DOI 10.17487/RFC7250,
              June 2014, <https://www.rfc-editor.org/rfc/rfc7250>.

8.2.  Informative References

   [I-D.beck-tls-trust-anchor-ids]
              Beck, B., Benjamin, D., O'Brien, D., and K. Nekritz, "TLS
              Trust Anchor Identifiers", Work in Progress, Internet-
              Draft, draft-beck-tls-trust-anchor-ids-03, 18 December
              2024, <https://datatracker.ietf.org/doc/html/draft-beck-
              tls-trust-anchor-ids-03>.

   [I-D.rbw-home-servers]
              Reddy.K, T., Boucadair, M., and D. Wing, "Identifying and
              Authenticating Home Servers: Requirements and Solution
              Analysis", Work in Progress, Internet-Draft, draft-rbw-
              home-servers-00, 19 September 2024,
              <https://datatracker.ietf.org/doc/html/draft-rbw-home-
              servers-00>.

   [PKIX]     Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/rfc/rfc5280>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8446>.

   [rpk-openssl]
              OpenSSL, "RFC7250 (RPK) support", March 2023,
              <https://github.com/openssl/openssl/pull/18185>.

   [rpk-wolfssl]
              WolfSSL, "wolfSSL supports Raw Public Keys", August 2023,
              <https://www.wolfssl.com/wolfssl-supports-raw-public-
              keys/>.

Appendix A.  Issues for Further Discussion

A.1.  PKI Fallback

   Currently the text suggests clients should fallback to PKI if Referee
   validation fails.  This means certificate warnings for self-signed
   certificates.  Is such fallback harmful or is it worthwhile?

A.2.  Multiple Networks: Multiple Referees

   If client has multiple Referees configured (due to visiting multiple
   networks), how does client know which Referee to use for the network
   it has joined?  If SSID, wither Ethernet?  Maybe during TLS handshake
   the server could indicate the server's Referee (akin to
   [I-D.beck-tls-trust-anchor-ids]).  Probably want to do service
   discovery to find the network's referee and validate if the
   (discovered) referee is an already-known referee.

   If there is only one referee, this problem never occurs.

A.3.  Unique Names

   Printer.internal or printer.local are handy names.  Unfortunately
   existing browsers have state that is tied to names -- web forms,
   cookies, and passwords.  Thus, we need names that contain a unique
   identifier like a UUID, e.g., printer.2180be87-3e00-4c7f-
   a366-5b57fce4cbf7.internal.  Or perhaps embedding part/all of the
   public key into the name itself, for example:

     printer.2180be87-3e00-4c7f-a366-5b57fce4cbf7.internal
     nas.103a40ee-c76f-46da-84a1-054b8f18ae33.internal
     router.fb5f73ed-275a-431e-aecf-436f0c54d69d.internal

   The Referee system is obliviuos to the contents of the unique part of
   the name, so all the devices could use the same site name (also
   called search domain or domain-search), for example:

     printer.ee80be87-3e00-4c7f-a366-5b57fce4c999.internal
     nas.ee80be87-3e00-4c7f-a366-5b57fce4c999.internal
     router.ee80be87-3e00-4c7f-a366-5b57fce4c999.internal

   The Referee system allows keeping the unique name the same for the
   lifetime of the device while allowing changing its public key.

      Note: Is public key security hygiene (changing every NNN days)
      important enough to build a Referee system?

A.4.  Key Lifetime (Rotating Public Key)

   For security hygiene, the public keys in a server and in the Referee
   are occasionally changed.  This section discusses how such changes
   are handled by a Referee system.

A.4.1.  Server

   If a server's public key changes the new key has to be installed into
   the network's Referee.  To automate such changes, the server could
   connect to the Referee and prove possession of its (old) private key
   (using TLS client authentication or using application-layer mechanism
   such as JSON Web Signature) and publish its new public key using an
   HTTP PUT.

      Note: such a PUT mechanism also means an attacker in possession of
      the server's private key can change the legitimate server's public
      key fingerprint in the Referee to now point at an attacker-
      controlled system, denying access to the legitimate server.

A.4.2.  Referee

   If the Referee's public key changes all the clients have to re-
   authenticate the Referee's new raw public key.  This is uncool.

   To allow changing the Referee's public key without client re-
   authentication, the client and Referee could do session resumption
   for its subsequent connections to the Referee (Section 2.2 of
   [RFC8446]).  When doing session resumption with the Referee, the
   client should also retrieve and cache the Referee's current public
   key fingerprint so if, in the future, the Referee cannot perform
   session resumption the client can still authenticate the Referee.

   With the above technique, the client will only have to (manually) re-
   authenticate the Referee when the Referee cannot perform session
   resumption.

A.5.  Incrementatal Adoption

   The Referee system requires support of both the client (to ask the
   Referee for mediation) and installation of a Referee -- which could
   be in the home router, NAS, or other always-on device.  This section
   explores how to bootstrap Referee system even when the server does
   not (yet) support Referee.

A.5.1.  Server Does Not Support Referee

   In the case a server does not support Referee, it will not register
   itself with the network's Referee.

   The Referee could be told by a network administrator to connect to
   such a server, extract public key, and install that public key and
   name into the Referee.  When a Referee-capable client connects to
   that server and receives a certificate signed by a Certification
   Authority the client does not trust, and that server is on a local
   domain, the client can query the Referee for the server's public key.
   The Referee responds with the server's public key which the client
   compares to the server's public key in the TLS handshake.  If they
   match, the client has finished authentication with the server.  If
   they don't match, the client considers the TLS handshake to have
   failed and displays an error.

Author's Address

   Dan Wing
   Citrix
   United States of America
   Email: danwing@gmail.com
